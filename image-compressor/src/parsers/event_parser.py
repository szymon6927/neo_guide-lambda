import logging

from core.constants import APP_NAME
from core.constants import BUCKET_URL
from core.exceptions import BusinessLogicException
from core.types import Event

logger = logging.getLogger()
logger.setLevel(logging.INFO)


class EventParser:
    def __init__(self, event: dict):
        self.event: Event = event

    def is_s3_put_event(self):
        logger.info('Looking for "ObjectCreated:Put" in event data')

        try:
            return self.event.get('Records')[0].get('eventName') == 'ObjectCreated:Put'
        except (AttributeError, TypeError) as e:
            logger.exception(f'Error while checking if "is_s3_put_event" - {e}')
            return None

    def get_bucket_name(self):
        logger.info('Looking for "Bucket name" in event data')

        try:
            return self.event.get('Records')[0].get('s3').get('bucket').get('name')
        except (AttributeError, TypeError) as e:
            logger.exception(f'Error while getting "get_bucket_name" - {e}')
            return None

    def get_object_key(self):
        logger.info('Looking for "Object Key" in event data')

        try:
            return self.event.get('Records')[0].get('s3').get('object').get('key')
        except (AttributeError, TypeError) as e:
            logger.exception(f'Error while getting "get_object_key" - {e}')
            return None

    def get_object_url(self):
        logger.info('Start building object url')

        object_key = self.get_object_key()

        if not object_key:
            raise BusinessLogicException('object_key is None')

        return f'{BUCKET_URL}{object_key}'

    def is_invoked_by_lambda(self):
        """Check if the event is invoked by lambda itself"""
        logger.info('Checking if event is generated by lambda itself')

        try:
            principal_id = self.event.get('Records')[0].get('userIdentity').get('principalId')

            if APP_NAME in principal_id:
                logger.info('Event is generated by lambda!')
                return True

            return False
        except (AttributeError, TypeError) as e:
            logger.exception(f'Error while checking if "is_invoked_by_lambda" - {e}')
            return False
