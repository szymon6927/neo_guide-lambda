version: 2.1

default_python_image: &default_python_image
  image: circleci/python:3.8

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/workspace

repo_working_dir: &repo_working_dir
  working_directory: ~/workspace/repo

#image_compressor_repo_working_dir: &image_compressor_repo_working_dir
#  working_directory: ~/workspace/repo

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-sam: circleci/aws-serverless@1.0.2

executors:
  python:
    <<: *repo_working_dir
    docker:
      - <<: *default_python_image

jobs:
  checkout_code:
    executor: python
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - repo

  image_compressor_install_requirements:
    executor: python
    steps:
      - <<: *attach_workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "image-compressor/src/dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/workspace/venv
            . ~/workspace/venv/bin/activate
            pip install -r image-compressor/src/dev.txt
      - save_cache:
          paths:
            - ~/workspace/venv
          key: v1-dependencies-{{ checksum "image-compressor/src/dev.txt" }}
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - repo
            - venv

#  build_app:
#    executor: aws-serverless/default
#    steps:
#      - checkout_code
#      - aws-serverless/install
#      - run: sam build --use-container

  image_compressor_run_tests:
    executor: python
    steps:
      - <<: *attach_workspace
      - run:
          name: run tests
          command: |
            . ~/workspace/venv/bin/activate
            cd image-compressor/src && python -m pytest

#  confiugre_aws_cli:
#    <<: *repo_working_dir
#    executor: aws-cli/default
#    steps:
#      - <<: *attach_workspace
#      - aws-cli/install
#      - aws-cli/configure:
#          aws-access-key-id: STAGING_AWS_ACCESS_KEY_ID
#          aws-secret-access-key: STAGING_AWS_SECRET_ACCESS_KEY
#          aws-region: STAGING_AWS_DEFAULT_REGION

  push_and_deploy_to_staging:
    <<: *repo_working_dir
    executor: aws-sam/default
    steps:
      - <<: *attach_workspace
      - aws-sam/install:
          aws-access-key-id: STAGING_AWS_ACCESS_KEY_ID
          aws-secret-access-key: STAGING_AWS_SECRET_ACCESS_KEY
          aws-region: STAGING_AWS_DEFAULT_REGION
      - aws-sam/build:
          aws-region: STAGING_AWS_DEFAULT_REGION
          template: image-compressor/template.yaml
          output-template-file: packaged.yaml
          s3-bucket: neo-guide-lambda
      - aws-sam/deploy:
          aws-region: STAGING_AWS_DEFAULT_REGION
          stack-name: image-compressor
          template: image-compressor/packaged.yaml


workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - checkout_code
      - image_compressor_install_requirements:
          requires:
            - checkout_code
      - image_compressor_run_tests:
          requires:
            - image_compressor_install_requirements
#      - confiugre_aws_cli:
#          requires:
#            - image_compressor_install_requirements
#            - image_compressor_run_tests
      - push_and_deploy_to_staging:
          requires:
            - image_compressor_install_requirements
            - image_compressor_run_tests
#            - confiugre_aws_cli
#             filters:
#              branches:
#                only:
#                  - master
